const db = require('../config/database');
const bcrypt = require('bcryptjs');

async function seedCompleteData() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu ho√†n ch·ªânh cho user1@gmail.com...\n');

    // 1. T·∫°o user1@gmail.com n·∫øu ch∆∞a c√≥
    console.log('1. T·∫°o t√†i kho·∫£n user1@gmail.com...');
    const hashedPassword = await bcrypt.hash('123456', 10);
    
    // Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i ch∆∞a
    const [existingUsers] = await db.execute(
      'SELECT user_id FROM users WHERE email = ?',
      ['user1@gmail.com']
    );

    let userId;
    if (existingUsers.length === 0) {
      const [result] = await db.execute(
        'INSERT INTO users (full_name, email, password, phone, license_plate, role) VALUES (?, ?, ?, ?, ?, ?)',
        ['Nguy·ªÖn VƒÉn A', 'user1@gmail.com', hashedPassword, '0123456789', '30A-12345', 'user']
      );
      userId = result.insertId;
      console.log(`‚úÖ ƒê√£ t·∫°o user v·ªõi ID: ${userId}`);
    } else {
      userId = existingUsers[0].user_id;
      console.log(`‚úÖ User ƒë√£ t·ªìn t·∫°i v·ªõi ID: ${userId}`);
    }

    // 2. T√¨m b√£i ƒë·ªó xe Phenikaa
    console.log('\n2. T√¨m b√£i ƒë·ªó xe Phenikaa...');
    const [phenikaaLots] = await db.execute(
      'SELECT lot_id, name, price_per_hour FROM parking_lots WHERE name LIKE ?',
      ['%Phenikaa%']
    );

    if (phenikaaLots.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y b√£i ƒë·ªó xe Phenikaa');
      return;
    }

    const phenikaaLot = phenikaaLots[0];
    console.log(`‚úÖ T√¨m th·∫•y b√£i: ${phenikaaLot.name} (ID: ${phenikaaLot.lot_id})`);
    console.log(`üí∞ Gi√°: ${phenikaaLot.price_per_hour.toLocaleString()} VNƒê/gi·ªù`);

    // 3. L·∫•y danh s√°ch ch·ªó ƒë·ªó xe c·ªßa b√£i Phenikaa
    console.log('\n3. L·∫•y danh s√°ch ch·ªó ƒë·ªó xe c·ªßa b√£i Phenikaa...');
    const [spots] = await db.execute(
      'SELECT spot_id, spot_number FROM parking_spots WHERE lot_id = ? ORDER BY spot_id LIMIT 20',
      [phenikaaLot.lot_id]
    );

    if (spots.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ch·ªó ƒë·ªó xe n√†o trong b√£i Phenikaa');
      return;
    }

    console.log(`‚úÖ T√¨m th·∫•y ${spots.length} ch·ªó ƒë·ªó xe`);

    // 4. T·∫°o l·ªãch s·ª≠ ƒë·ªó xe cho user1 v·ªõi ph√≠ t√≠nh theo th·ªùi gian th·ª±c t·∫ø
    console.log('\n4. T·∫°o l·ªãch s·ª≠ ƒë·ªó xe cho user1...');
    const parkingLogs = [
      {
        user_id: userId,
        spot_id: spots[0].spot_id,
        entry_time: '2024-01-15 08:30:00',
        exit_time: '2024-01-15 10:30:00',
        total_minutes: 120,
        fee: Math.ceil(120 / 60) * phenikaaLot.price_per_hour, // 2 gi·ªù = 16,000 VNƒê
        status: 'out'
      },
      {
        user_id: userId,
        spot_id: spots[1].spot_id,
        entry_time: '2024-01-16 14:00:00',
        exit_time: '2024-01-16 16:30:00',
        total_minutes: 150,
        fee: Math.ceil(150 / 60) * phenikaaLot.price_per_hour, // 2.5 gi·ªù = 3 gi·ªù = 24,000 VNƒê
        status: 'out'
      },
      {
        user_id: userId,
        spot_id: spots[2].spot_id,
        entry_time: '2024-01-17 09:15:00',
        exit_time: '2024-01-17 11:45:00',
        total_minutes: 150,
        fee: Math.ceil(150 / 60) * phenikaaLot.price_per_hour, // 2.5 gi·ªù = 3 gi·ªù = 24,000 VNƒê
        status: 'out'
      },
      {
        user_id: userId,
        spot_id: spots[3].spot_id,
        entry_time: '2024-01-18 13:30:00',
        exit_time: '2024-01-18 15:30:00',
        total_minutes: 120,
        fee: Math.ceil(120 / 60) * phenikaaLot.price_per_hour, // 2 gi·ªù = 16,000 VNƒê
        status: 'out'
      },
      // Th√™m m·ªôt s·ªë l·∫ßn ƒë·ªó xe ƒëang di·ªÖn ra
      {
        user_id: userId,
        spot_id: spots[0].spot_id, // S·ª≠ d·ª•ng l·∫°i spot ƒë·∫ßu ti√™n
        entry_time: '2024-01-25 14:00:00',
        exit_time: null,
        total_minutes: null,
        fee: null,
        status: 'in'
      }
    ];

    const logIds = [];
    for (const log of parkingLogs) {
      const [result] = await db.execute(
        'INSERT INTO parking_logs (user_id, spot_id, entry_time, exit_time, total_minutes, fee, status) VALUES (?, ?, ?, ?, ?, ?, ?)',
        [log.user_id, log.spot_id, log.entry_time, log.exit_time, log.total_minutes, log.fee, log.status]
      );
      logIds.push(result.insertId);
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${parkingLogs.length} l·ªãch s·ª≠ ƒë·ªó xe`);

    // 5. T·∫°o d·ªØ li·ªáu thanh to√°n
    console.log('\n5. T·∫°o d·ªØ li·ªáu thanh to√°n...');
    const paymentMethods = ['cash', 'momo', 'banking', 'visa'];
    
    for (let i = 0; i < logIds.length - 1; i++) { // Tr·ª´ log cu·ªëi v√¨ ƒëang ƒë·ªó xe
      const logId = logIds[i];
      const log = parkingLogs[i];
      const paymentMethod = paymentMethods[i % paymentMethods.length];
      
      await db.execute(
        'INSERT INTO payments (log_id, amount, method, paid_at) VALUES (?, ?, ?, ?)',
        [logId, log.fee, paymentMethod, log.exit_time]
      );
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${logIds.length - 1} thanh to√°n`);

    // 6. T·∫°o m·ªôt s·ªë ƒë·∫∑t ch·ªó (reservations)
    console.log('\n6. T·∫°o d·ªØ li·ªáu ƒë·∫∑t ch·ªó...');
    const reservations = [
      {
        user_id: userId,
        spot_id: spots[1].spot_id, // S·ª≠ d·ª•ng spot th·ª© 2
        reserved_at: '2024-01-26 08:00:00',
        expected_start: '2024-01-26 09:00:00',
        expected_end: '2024-01-26 12:00:00',
        status: 'confirmed'
      },
      {
        user_id: userId,
        spot_id: spots[2].spot_id, // S·ª≠ d·ª•ng spot th·ª© 3
        reserved_at: '2024-01-27 10:00:00',
        expected_start: '2024-01-27 11:00:00',
        expected_end: '2024-01-27 14:00:00',
        status: 'pending'
      }
    ];

    for (const reservation of reservations) {
      await db.execute(
        'INSERT INTO reservations (user_id, spot_id, reserved_at, expected_start, expected_end, status) VALUES (?, ?, ?, ?, ?, ?)',
        [reservation.user_id, reservation.spot_id, reservation.reserved_at, reservation.expected_start, reservation.expected_end, reservation.status]
      );
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${reservations.length} ƒë·∫∑t ch·ªó`);

    console.log('\n' + '='.repeat(60));
    console.log('üéâ HO√ÄN TH√ÄNH T·∫†O D·ªÆ LI·ªÜU!');
    console.log('='.repeat(60));
    console.log(`üë§ T√†i kho·∫£n: user1@gmail.com`);
    console.log(`üîë M·∫≠t kh·∫©u: 123456`);
    console.log(`üÜî User ID: ${userId}`);
    console.log(`üè¢ B√£i ƒë·ªó xe: ${phenikaaLot.name}`);
    console.log(`üí∞ Gi√°: ${phenikaaLot.price_per_hour.toLocaleString()} VNƒê/gi·ªù`);
    console.log(`üöó S·ªë ch·ªó ƒë·ªó xe s·ª≠ d·ª•ng: ${spots.length}`);
    console.log(`üìä S·ªë l·ªãch s·ª≠ ƒë·ªó xe: ${parkingLogs.length}`);
    console.log(`üí≥ S·ªë thanh to√°n: ${logIds.length - 1}`);
    console.log(`üìÖ S·ªë ƒë·∫∑t ch·ªó: ${reservations.length}`);
    console.log('\nüìã Chi ti·∫øt ph√≠ theo th·ªùi gian:');
    parkingLogs.slice(0, 10).forEach((log, index) => {
      const duration = log.total_minutes ? Math.round(log.total_minutes / 60 * 10) / 10 : 0;
      const hours = Math.ceil(log.total_minutes / 60);
      console.log(`${index + 1}. ${duration} gi·ªù (${hours} gi·ªù t√≠nh ph√≠) = ${log.fee?.toLocaleString() || 0} VNƒê`);
    });
    console.log('='.repeat(60));

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu:', error);
  } finally {
    process.exit(0);
  }
}

// Ch·∫°y script
seedCompleteData();
