const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:5000/api';
let authToken = '';

// Test login ƒë·ªÉ l·∫•y token
async function login() {
  try {
    const response = await fetch(`${BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'user1@example.com',
        password: 'password123'
      })
    });

    const data = await response.json();
    if (data.success) {
      authToken = data.token;
      console.log('‚úÖ Login th√†nh c√¥ng, token:', authToken.substring(0, 20) + '...');
      return true;
    } else {
      console.log('‚ùå Login th·∫•t b·∫°i:', data.message);
      return false;
    }
  } catch (error) {
    console.error('‚ùå L·ªói login:', error.message);
    return false;
  }
}

// Test l·∫•y l·ªãch s·ª≠ ƒë·ªó xe
async function testGetHistory() {
  try {
    const response = await fetch(`${BASE_URL}/parking-logs/history`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json',
      }
    });

    const data = await response.json();
    if (data.success) {
      console.log('‚úÖ L·∫•y l·ªãch s·ª≠ th√†nh c√¥ng');
      console.log(`üìä T√¨m th·∫•y ${data.data.length} l·∫ßn ƒë·ªó xe`);
      if (data.data.length > 0) {
        console.log('üìã M·∫´u d·ªØ li·ªáu:', {
          log_id: data.data[0].log_id,
          parking_lot_name: data.data[0].parking_lot_name,
          spot_number: data.data[0].spot_number,
          status: data.data[0].status,
          fee: data.data[0].fee
        });
      }
    } else {
      console.log('‚ùå L·∫•y l·ªãch s·ª≠ th·∫•t b·∫°i:', data.message);
    }
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y l·ªãch s·ª≠:', error.message);
  }
}

// Test t·∫°o log ƒë·ªó xe m·ªõi
async function testCreateEntry() {
  try {
    const response = await fetch(`${BASE_URL}/parking-logs/entry`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        spotId: 1
      })
    });

    const data = await response.json();
    if (data.success) {
      console.log('‚úÖ T·∫°o log ƒë·ªó xe th√†nh c√¥ng');
      console.log('üÜî Log ID:', data.data.logId);
      return data.data.logId;
    } else {
      console.log('‚ùå T·∫°o log ƒë·ªó xe th·∫•t b·∫°i:', data.message);
      return null;
    }
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o log ƒë·ªó xe:', error.message);
    return null;
  }
}

// Test c·∫≠p nh·∫≠t log khi ra b√£i
async function testUpdateExit(logId) {
  if (!logId) return;
  
  try {
    const response = await fetch(`${BASE_URL}/parking-logs/${logId}/exit`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        totalMinutes: 120,
        fee: 20000
      })
    });

    const data = await response.json();
    if (data.success) {
      console.log('‚úÖ C·∫≠p nh·∫≠t log ra b√£i th√†nh c√¥ng');
    } else {
      console.log('‚ùå C·∫≠p nh·∫≠t log ra b√£i th·∫•t b·∫°i:', data.message);
    }
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t log ra b√£i:', error.message);
  }
}

// Test l·∫•y chi ti·∫øt log
async function testGetLogDetail(logId) {
  if (!logId) return;
  
  try {
    const response = await fetch(`${BASE_URL}/parking-logs/${logId}`, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json',
      }
    });

    const data = await response.json();
    if (data.success) {
      console.log('‚úÖ L·∫•y chi ti·∫øt log th√†nh c√¥ng');
      console.log('üìã Chi ti·∫øt:', {
        log_id: data.data.log_id,
        entry_time: data.data.entry_time,
        exit_time: data.data.exit_time,
        total_minutes: data.data.total_minutes,
        fee: data.data.fee,
        status: data.data.status
      });
    } else {
      console.log('‚ùå L·∫•y chi ti·∫øt log th·∫•t b·∫°i:', data.message);
    }
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y chi ti·∫øt log:', error.message);
  }
}

// Ch·∫°y t·∫•t c·∫£ tests
async function runAllTests() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test Parking Logs API...\n');
  
  // Test login
  const loginSuccess = await login();
  if (!loginSuccess) {
    console.log('‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c test do login th·∫•t b·∫°i');
    return;
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // Test l·∫•y l·ªãch s·ª≠
  await testGetHistory();
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // Test t·∫°o log m·ªõi
  const newLogId = await testCreateEntry();
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // Test l·∫•y chi ti·∫øt log
  await testGetLogDetail(newLogId);
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // Test c·∫≠p nh·∫≠t log ra b√£i
  await testUpdateExit(newLogId);
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // Test l·∫•y l·ªãch s·ª≠ l·∫°i ƒë·ªÉ xem log m·ªõi
  await testGetHistory();
  
  console.log('\n‚úÖ Ho√†n th√†nh t·∫•t c·∫£ tests!');
}

// Ch·∫°y tests
runAllTests().catch(console.error);
